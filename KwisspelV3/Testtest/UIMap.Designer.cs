// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Testtest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// VoegVraagToe - Use 'VoegVraagToeParams' to pass parameters into this method.
        /// </summary>
        public void VoegVraagToe()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.UIMainWindowWindow.UIItemButton;
            WpfEdit uIItemEdit = this.UIAddVraagWindow.UIItemEdit;
            WpfText uISoortVraagText = this.UIAddVraagWindow.UISoortVraagText;
            WpfComboBox uIItemComboBox = this.UIAddVraagWindow.UIItemComboBox;
            WpfButton uIVraagOpslaanButton = this.UIAddVraagWindow.UIVraagOpslaanButton;
            #endregion

            // Click '+' button
            Mouse.Click(uIItemButton, new Point(24, 8));

            // Type 'VoegVraagToe' in text box
            uIItemEdit.Text = this.VoegVraagToeParams.UIItemEditText;

            // Click 'Soort Vraag:' label
            Mouse.Click(uISoortVraagText, new Point(101, 15));

            // Click combo box
            Mouse.Click(uIItemComboBox, new Point(39, 3));

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Click 'Vraag Opslaan' button
            Mouse.Click(uIVraagOpslaanButton, new Point(118, 12));
        }
        
        /// <summary>
        /// Test - Use 'TestParams' to pass parameters into this method.
        /// </summary>
        public void Test()
        {
            #region Variable Declarations
            WpfButton uIItemButton1 = this.UIMainWindowWindow.UIItemButton1;
            WpfEdit uIItemEdit = this.UIAddAntwoordWindow.UIItemEdit;
            WpfButton uIAntwoordOpslaanButton = this.UIAddAntwoordWindow.UIAntwoordOpslaanButton;
            WinButton uIOKButton = this.UIErrorWindow.UIOKWindow.UIOKButton;
            WinButton uISluitenButton = this.UIAddAntwoordWindow1.UISluitenButton;
            #endregion

            // Click '+' button
            Mouse.Click(uIItemButton1, new Point(22, 10));

            // Type 'Antwoord Test' in text box
            uIItemEdit.Text = this.TestParams.UIItemEditText;

            // Type '{LShiftKey}' in text box
            Keyboard.SendKeys(uIItemEdit, this.TestParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'Antwoord Opslaan' button
            Mouse.Click(uIAntwoordOpslaanButton, new Point(76, 11));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(51, 16));

            // Click 'Sluiten' button
            Mouse.Click(uISluitenButton, new Point(20, 10));
        }
        
        #region Properties
        public virtual VoegVraagToeParams VoegVraagToeParams
        {
            get
            {
                if ((this.mVoegVraagToeParams == null))
                {
                    this.mVoegVraagToeParams = new VoegVraagToeParams();
                }
                return this.mVoegVraagToeParams;
            }
        }
        
        public virtual TestParams TestParams
        {
            get
            {
                if ((this.mTestParams == null))
                {
                    this.mTestParams = new TestParams();
                }
                return this.mTestParams;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIAddVraagWindow UIAddVraagWindow
        {
            get
            {
                if ((this.mUIAddVraagWindow == null))
                {
                    this.mUIAddVraagWindow = new UIAddVraagWindow();
                }
                return this.mUIAddVraagWindow;
            }
        }
        
        public UIAddAntwoordWindow UIAddAntwoordWindow
        {
            get
            {
                if ((this.mUIAddAntwoordWindow == null))
                {
                    this.mUIAddAntwoordWindow = new UIAddAntwoordWindow();
                }
                return this.mUIAddAntwoordWindow;
            }
        }
        
        public UIErrorWindow UIErrorWindow
        {
            get
            {
                if ((this.mUIErrorWindow == null))
                {
                    this.mUIErrorWindow = new UIErrorWindow();
                }
                return this.mUIErrorWindow;
            }
        }
        
        public UIAddAntwoordWindow1 UIAddAntwoordWindow1
        {
            get
            {
                if ((this.mUIAddAntwoordWindow1 == null))
                {
                    this.mUIAddAntwoordWindow1 = new UIAddAntwoordWindow1();
                }
                return this.mUIAddAntwoordWindow1;
            }
        }
        #endregion
        
        #region Fields
        private VoegVraagToeParams mVoegVraagToeParams;
        
        private TestParams mTestParams;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIAddVraagWindow mUIAddVraagWindow;
        
        private UIAddAntwoordWindow mUIAddAntwoordWindow;
        
        private UIErrorWindow mUIErrorWindow;
        
        private UIAddAntwoordWindow1 mUIAddAntwoordWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VoegVraagToe'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class VoegVraagToeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'VoegVraagToe' in text box
        /// </summary>
        public string UIItemEditText = "VoegVraagToe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class TestParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Antwoord Test' in text box
        /// </summary>
        public string UIItemEditText = "Antwoord Test";
        
        /// <summary>
        /// Type '{LShiftKey}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{LShiftKey}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Name] = "+";
                    this.mUIItemButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.Name] = "+";
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.Instance] = "2";
                    this.mUIItemButton1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private WpfButton mUIItemButton1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAddVraagWindow : WpfWindow
    {
        
        public UIAddVraagWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Add Vraag";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Add Vraag");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Add Vraag");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WpfText UISoortVraagText
        {
            get
            {
                if ((this.mUISoortVraagText == null))
                {
                    this.mUISoortVraagText = new WpfText(this);
                    #region Search Criteria
                    this.mUISoortVraagText.SearchProperties[WpfText.PropertyNames.Name] = "Soort Vraag:";
                    this.mUISoortVraagText.WindowTitles.Add("Add Vraag");
                    #endregion
                }
                return this.mUISoortVraagText;
            }
        }
        
        public WpfComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Add Vraag");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        
        public WpfButton UIVraagOpslaanButton
        {
            get
            {
                if ((this.mUIVraagOpslaanButton == null))
                {
                    this.mUIVraagOpslaanButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIVraagOpslaanButton.SearchProperties[WpfButton.PropertyNames.Name] = "Vraag Opslaan";
                    this.mUIVraagOpslaanButton.WindowTitles.Add("Add Vraag");
                    #endregion
                }
                return this.mUIVraagOpslaanButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        
        private WpfText mUISoortVraagText;
        
        private WpfComboBox mUIItemComboBox;
        
        private WpfButton mUIVraagOpslaanButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAddAntwoordWindow : WpfWindow
    {
        
        public UIAddAntwoordWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "AddAntwoord";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("AddAntwoord");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("AddAntwoord");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WpfButton UIAntwoordOpslaanButton
        {
            get
            {
                if ((this.mUIAntwoordOpslaanButton == null))
                {
                    this.mUIAntwoordOpslaanButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAntwoordOpslaanButton.SearchProperties[WpfButton.PropertyNames.Name] = "Antwoord Opslaan";
                    this.mUIAntwoordOpslaanButton.WindowTitles.Add("AddAntwoord");
                    #endregion
                }
                return this.mUIAntwoordOpslaanButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        
        private WpfButton mUIAntwoordOpslaanButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIErrorWindow : WinWindow
    {
        
        public UIErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAddAntwoordWindow1 : WinWindow
    {
        
        public UIAddAntwoordWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AddAntwoord";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("AddAntwoord");
            #endregion
        }
        
        #region Properties
        public WinButton UISluitenButton
        {
            get
            {
                if ((this.mUISluitenButton == null))
                {
                    this.mUISluitenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISluitenButton.SearchProperties[WinButton.PropertyNames.Name] = "Sluiten";
                    this.mUISluitenButton.WindowTitles.Add("AddAntwoord");
                    #endregion
                }
                return this.mUISluitenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISluitenButton;
        #endregion
    }
}
