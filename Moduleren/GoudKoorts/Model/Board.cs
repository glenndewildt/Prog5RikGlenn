//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class Board
{
    public Dock dock { get; set; }
    public virtual int Score { get; set; }
    public virtual bool GameOver { get; set; }
    public MainTrack MainTrack { get; set; }
    public Warehouse[] Warehouses { get; set; }
    public ConvergingSwitch[] ConSwitch { get; set; }
    public DevergingSwtich[] DevSwitch { get; set; }
    public MainTrack[] Basis { get; set; }
    public Ship Ship { get; set; }
    public LinkedList<MainTrack> DockPath { get; set; }
    public LinkedList<MainTrack> SavePath { get; set; }
    public LinkedList<MainTrack> SecondPath { get; set; }
    public List<MainTrack> UsedTracks { get; set; }
    public Char[] schipChar { get; set; }


    public Board()
    {
        dock = new Dock();
        UsedTracks = new List<MainTrack>();
        DockPath = new LinkedList<MainTrack>();
        SavePath = new LinkedList<MainTrack>();
        SecondPath = new LinkedList<MainTrack>();
        schipChar = new Char[25];

        ConSwitch = new ConvergingSwitch[5];
        for (int x = 0; x < ConSwitch.Length; x++ )
        {
            ConSwitch[x] = new ConvergingSwitch();
        }
        DevSwitch = new DevergingSwtich[5];
        for (int x = 0; x < DevSwitch.Length; x++)
        {
            DevSwitch[x] = new DevergingSwtich();
        }
        Basis  = new MainTrack[10];
        for (int x = 0; x < Basis.Length; x++)
        {
            Basis[x] = new MainTrack();
        }
        Warehouses = new Warehouse[3];
        for (int x = 0; x < Warehouses.Length; x++)
        {
            Warehouses[x] = new Warehouse();
        }
        Ship = new Ship();
        MakePath();
        Spawn();
    }

    public void MakePath()
    {
        bool end = false;
        
        for (int x = 0; x <= 2; x++)
        {
            for (int i = 0; i < 25; i++)
            {
              
                if (x == 0)
                {
                    if (i == 20) {
                        DockPath.AddLast(dock);
                    }
                   if (i == 0)
                   {
                        DockPath.AddLast(Warehouses[0]);
                   }
                   if (i == 3)
                   {
                       DockPath.AddLast(ConSwitch[0]);
                       DockPath.AddLast(Basis[0]);
                       DockPath.AddLast(DevSwitch[0]);

                   }

                   if (i == 9)
                   {
                       DockPath.AddLast(ConSwitch[2]);

                   }
                   DockPath.AddLast(new MainTrack());
                }
                if (x == 1)
                {
                   
                    if (i == 6) {
                        SecondPath.AddLast(ConSwitch[2]);
                        end = true;
                    }
                    if (i == 5)
                    {
                        SecondPath.AddLast(ConSwitch[1]);
                        SecondPath.AddLast(Basis[1]);
                        SecondPath.AddLast(DevSwitch[1]);

                    }
                    if (i == 3)
                    {
                        SecondPath.AddLast(ConSwitch[0]);
                        SecondPath.AddLast(Basis[0]);
                        SecondPath.AddLast(DevSwitch[0]);
                    }
                    if (i == 0)
                    {
                        SecondPath.AddLast(Warehouses[1]);
                    }
                    if(end == false)
                    SecondPath.AddLast(new MainTrack());
                }
                if (x == 2)
                {
                    if (i == 8) {
                        SavePath.AddLast(ConSwitch[1]);
                        SavePath.AddLast(Basis[1]);
                        SavePath.AddLast(DevSwitch[1]);
                    
                    }
                    if (i == 0)
                    {
                        SavePath.AddLast(Warehouses[2]);
                    }
                    SavePath.AddLast(new MainTrack());
                }
            }

        }
    }

    public virtual void Move()
    {
    
            dock.Losse();
        
        foreach (var e in UsedTracks)
        {
            if( e.Move(DockPath,UsedTracks)){
                
                return;
            }
            if (e.Move(SecondPath, UsedTracks))
            {
                return;
            }
            if (e.Move(SavePath, UsedTracks))
            {
                return;
            }

           
        }
        
    }

    public virtual void Spawn()
    {
        Minecart mineCart = new Minecart();
        Random randomPath = new Random();
        int random = randomPath.Next(3);
        if (random == 0)
        {
            DockPath.First.Next.Value.Place(mineCart);
            UsedTracks.Add(DockPath.First.Next.Value);
        }
        else if (random == 1)
        {
            SecondPath.First.Next.Value.Place(mineCart);
            UsedTracks.Add(SecondPath.First.Next.Value);
        }
        else if (random == 2)
        {
            SavePath.First.Next.Value.Place(mineCart);
            UsedTracks.Add(SavePath.First.Next.Value);
        }
        
        
    }

    public virtual void Tick()
    {
        throw new System.NotImplementedException();
    }
}

